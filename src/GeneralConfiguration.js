// Generated by CoffeeScript 1.6.2
var GeneralConfiguration, Logger, ReadableEntity, Tools, TreeElement, path, _GeneralConfiguration;

path = require('path');

ReadableEntity = require('./ReadableEntity');

Tools = require('./Tools');

TreeElement = require('./TreeElement');

Logger = require('./Logger');

/**
 * GeneralConfiguration is a class dealing with GeneralConfiguration files
 * The main goal of this class is to provide read and process general configuration files
 * 
 * @class GeneralConfiguration
 * @extends Logger
 * @extends ReadableEntity
 * @extends TreeElement
*/


GeneralConfiguration = Tools.implementing(Logger, ReadableEntity, TreeElement, _GeneralConfiguration = (function() {
  function _GeneralConfiguration() {}

  return _GeneralConfiguration;

})(), GeneralConfiguration = (function() {
  GeneralConfiguration.prototype.GeneralConfiguration = true;

  function GeneralConfiguration() {
    this._constructor_();
  }

  GeneralConfiguration.prototype._constructor_ = function() {
    return this._parentConstructor_();
  };

  GeneralConfiguration.prototype._setDefaultContent = function(content) {
    var _ref, _ref1, _ref2, _ref3, _ref4;

    if ((_ref = content.name) == null) {
      content.name = path.basename(this.getId(), '.json');
    }
    if ((_ref1 = content.moduleConfigurationFilename) == null) {
      content.moduleConfigurationFilename = 'assets.json';
    }
    if ((_ref2 = content.plugins) == null) {
      content.plugins = [];
    }
    if ((_ref3 = content.pluginParameters) == null) {
      content.pluginParameters = {};
    }
    return (_ref4 = content.loadedModules) != null ? _ref4 : content.loadedModules = [];
  };

  GeneralConfiguration.prototype.readAllModules = function(cb) {
    var content;

    cb = cb || function() {};
    content = this.getLastExecutableContent();
    if (content === null) {
      cb(new Error('There is no executable content pushed on the Module Class'));
      cb = function() {};
      return;
    }
    this._setDefaultContent(content);
    return cb();
  };

  return GeneralConfiguration;

})());

module.exports = GeneralConfiguration;
