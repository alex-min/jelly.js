// Generated by CoffeeScript 1.6.2
var File, Logger, PluginHandler, PluginInterface, ReadableEntity, Tools, TreeElement, async, fs, _PluginHandler;

async = require('async');

fs = require('fs');

Tools = require('./Tools');

Logger = require('./Logger');

ReadableEntity = require('./ReadableEntity');

TreeElement = require('./TreeElement');

File = require('./File');

PluginInterface = require('./PluginInterface');

/**
 * PluginHandler is the child class of PluginDirectory.
 * Each PluginDirectory instance is suppose to contain a PluginHandler class with itself, multiple PluginInterface in it.
 * This class is dealing with configuration related to a plugin.
 * The code is handled by a PluginInterface class
 * 
 * @class PluginHandler
 * @extends Logger
 * @extends ReadableEntity
 * @extends TreeElement
*/


PluginHandler = Tools.implementing(Logger, ReadableEntity, TreeElement, _PluginHandler = (function() {
  function _PluginHandler() {}

  return _PluginHandler;

})(), PluginHandler = (function() {
  function PluginHandler() {
    this._constructor_();
  }

  PluginHandler.prototype._constructor_ = function() {
    this._parentConstructor_();
    return this._pluginInterface = new PluginInterface();
  };

  /**
   * Read config file of the plugin (/config.json).
   * This method will update the current content to the config file.
   * Before calling this function, make sure a directory is previously pushed as a content (by calling updateContent).
   * To set a new directory for the plugin, please call this.updateContent({directory:'newdir'}).
   * This method must be called again after to update the configuration file.
   *
   * @for PluginHandler
   * @method readConfigFile
   * @async
   * @param {Function}[callback] callback function
   * @param {String} callback.err Error found during execution
  */


  PluginHandler.prototype.readConfigFile = function(cb) {
    var dir;

    cb = cb || function() {};
    dir = this.getLastDirectory();
    if (dir === null) {
      cb(new Error("No directory is specified"));
      cb = function() {};
      return;
    }
    return this.readUpdateAndExecute("" + dir + "/config.json", 'utf8', function(err, data) {
      if (err != null) {
        cb(new Error("Unable to read the plugin configuration file : " + err.message));
        cb = function() {};
        return;
      }
      return cb(null);
    });
  };

  /**
   * Get the PluginInterface instance associated with the class.
   * The PluginInterface instance is handling the main file (default:main.js) of the plugin.
   * The instance is created in the constructor, there is no need to call anything to create it.
   *
   * @for PluginHandler
   * @method getPluginInterface
   * @return {PluginInterface} The PluginInterface instance
  */


  PluginHandler.prototype.getPluginInterface = function() {
    return this._pluginInterface;
  };

  PluginHandler.prototype.reload = function(cb) {
    var self;

    cb = cb || function() {};
    self = this;
    return this.readConfigFile(function(err) {
      if (err != null) {
        cb(err);
        cb = function() {};
        return;
      }
      return self._pluginInterface.unload(function(err) {
        return cb(err);
      });
    });
  };

  return PluginHandler;

})());

module.exports = PluginHandler;
