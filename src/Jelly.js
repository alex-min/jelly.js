// Generated by CoffeeScript 1.6.2
var GeneralConfiguration, Jelly, Logger, ReadableEntity, Tools, fs, _Jelly;

GeneralConfiguration = require('./GeneralConfiguration');

Logger = require('./Logger');

fs = require('fs');

Tools = require('./Tools');

ReadableEntity = require('./ReadableEntity');

/**
 * Jelly is the main class of the framework
 * 
 * @class Jelly
*/


Jelly = Tools.implementing(Logger, ReadableEntity, _Jelly = (function() {
  function _Jelly() {}

  return _Jelly;

})(), Jelly = (function() {
  function Jelly() {
    this.getLogger().info('Jelly: Creating a new instance.');
    this._rootDirectory = __dirname;
  }

  /**
   * Returns the current root directory
   * Should return __dirname if nothing is set.
   *
   * @for Jelly
   * @method getRootDirectory
   * @return {String} Root directory
  */


  Jelly.prototype.getRootDirectory = function() {
    return this._rootDirectory;
  };

  /**
   * Sets the current root directory
   *
   * @for Jelly
   * @method setRootDirectory
   * @return {String} Root directory
  */


  Jelly.prototype.setRootDirectory = function(dir) {
    this.getLogger().info("Jelly: the root directory is now set to " + dir);
    return this._rootDirectory = dir;
  };

  /**
   * Checks if the rootDirectory is valid
   *
   * @for Jelly
   * @method checkRootDirectory
   * @param {cb} Callback to fire, parameters : (err)
   * @return {String} Root directory
  */


  Jelly.prototype.checkRootDirectory = function(cb) {
    return fs.stat(confDir, function(err, st) {
      var e;

      try {
        if (err) {
          cb(new Error(err), null);
          cb = function() {};
          return;
        }
        if (!(st.isDirectory())) {
          cb(new Error("" + confDir + " is not a valid directory"), null);
          cb = function() {};
          return;
        }
        return cb(null);
      } catch (_error) {
        e = _error;
        cb(e, null);
        return cb = function() {};
      }
    });
  };

  /**
   * read the main configuration file (/conf/JellyConf.json), the is no interpretation yet
   *
   * @for Jelly
   * @method setRootDirectory
   * @return {String} Root directory
  */


  Jelly.prototype.readJellyConfigurationFile = function(cb) {
    var confDir, e, rootdir, self;

    self = this;
    cb = cb || function() {};
    try {
      rootdir = this.getRootDirectory();
      confDir = "" + rootdir + "/conf";
      return fs.stat(confDir, function(err, st) {
        var e;

        try {
          if (err) {
            cb(new Error(err), null);
            cb = function() {};
            return;
          }
          if (!(st.isDirectory())) {
            cb(new Error("" + confDir + " is not a valid directory"), null);
            cb = function() {};
            return;
          }
          return self.updateContentFromFile("" + confDir + "/JellyConf.json", 'utf8', function(err, res) {
            if (err != null) {
              cb(err, null);
              cb = function() {};
              return;
            }
            cb(null, res);
            return cb = function() {};
          });
        } catch (_error) {
          e = _error;
          cb(e, null);
          return cb = function() {};
        }
      });
    } catch (_error) {
      e = _error;
      cb(e, null);
      return cb = function() {};
    }
  };

  Jelly.prototype.readAllGeneralConfigurationFiles = function(cb) {};

  return Jelly;

})());

Tools.include(Jelly, ReadableEntity);

module.exports = Jelly;
