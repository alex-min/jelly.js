// Generated by CoffeeScript 1.6.2
var assert, e, jy, pluginDir, root, toType;

pluginDir = __dirname + '/../';

toType = function(obj) {
  return {}.toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
};

assert = require('chai').assert;

try {
  jy = require('jelly');
} catch (_error) {
  e = _error;
  root = __dirname + '/../../../../';
  jy = require("" + root + "/index.js");
}

describe('#Plugin::httpserver', function() {
  it('Should load the plugin', function(cb) {
    var jelly;

    jelly = new jy.Jelly();
    return jelly.getPluginDirectoryList().readPluginFromPath(pluginDir, 'httpserver', function(err, dt) {
      return cb(err);
    });
  });
  return it('Should register an express server', function(cb) {
    var jelly;

    jelly = new jy.Jelly();
    return jelly.getPluginDirectoryList().readPluginFromPath(pluginDir, 'httpserver', function(err, dt) {
      if (err != null) {
        cb(err);
        cb = function() {};
        return;
      }
      return dt.getPluginInterface().load(function(err) {
        var port, server;

        if (err != null) {
          cb(err);
          cb = function() {};
          return;
        }
        try {
          server = dt.getPluginInterface().getSharedObjectManager().getObject('httpserver', 'server');
          assert.equal(toType(server), 'object');
          assert.equal(server.constructor.name, 'SharedObject');
          port = parseInt(Math.random() * 2000) + 1000;
          return dt.getPluginInterface().oncall({}, {
            port: port
          }, function(err) {
            return cb(err);
          });
        } catch (_error) {
          e = _error;
          return cb(e);
        }
      });
    });
  });
});
