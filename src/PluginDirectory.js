// Generated by CoffeeScript 1.6.2
var File, Logger, PluginDirectory, ReadableEntity, Tools, TreeElement, async, fs, _PluginDirectory;

async = require('async');

fs = require('fs');

Tools = require('./Tools');

Logger = require('./Logger');

ReadableEntity = require('./ReadableEntity');

TreeElement = require('./TreeElement');

File = require('./File');

/**
 * PluginDirectory is the parent class of PluginHandler.
 * Each Jelly instance is suppose to contain a PluginDirectory class with multiple PluginHandler in it.
 * This class is dealing only with general methods related to all plugins.
 * To use a plugin directly, look at the PluginHandler class.
 * 
 * @class PluginDirectory
 * @extends Logger
 * @extends ReadableEntity
 * @extends TreeElement
*/


PluginDirectory = Tools.implementing(Logger, ReadableEntity, TreeElement, _PluginDirectory = (function() {
  function _PluginDirectory() {}

  return _PluginDirectory;

})(), PluginDirectory = (function() {
  function PluginDirectory() {
    this._constructor_();
  }

  PluginDirectory.prototype._constructor_ = function() {
    return this._parentConstructor_();
  };

  /**
   * Get the logger class for external usage
   *
   * @for PluginDirectory
   * @method readAllPlugins
   * @async
   * @param {Function}[callback] callback function
   * @param {String} callback.err Error found during execution
  */


  PluginDirectory.prototype.readAllPlugins = function(cb) {
    var e, jelly, self;

    self = this;
    cb = cb || function() {};
    try {
      jelly = this.getParent();
      if (jelly === null || typeof jelly === 'undefined') {
        cb(new Error("The PluginDirectory class must be bound to a Jelly configuration file. Please call PluginDirectory::setParent() if you are using this class manualy."));
        cb = function() {};
        return;
      }
      return async.series([
        function(cb) {
          return self.readPluginDirectory("" + __dirname + "/plugins", cb);
        }, function(cb) {
          return self.readPluginDirectory(jelly.getPluginDirectory(), cb);
        }
      ], function(err) {
        cb(err);
        return cb = function() {};
      });
    } catch (_error) {
      e = _error;
      return cb(e);
    }
  };

  PluginDirectory.prototype.readPluginDirectory = function(dir, cb) {
    var e, self;

    self = this;
    cb = cb || function() {};
    try {
      if (dir === null || typeof dir === 'undefined') {
        cb(new Error("Invalid parameter: directory == null"));
        cb = function() {};
        return;
      }
      return fs.readdir(dir, function(err, files) {
        return async.map(files, function(file, cb) {
          return self.readPluginFromPath("" + dir + "/" + file, file, cb);
        }, function(err) {
          return cb(err);
        });
      });
    } catch (_error) {
      e = _error;
      return cb(e);
    }
  };

  PluginDirectory.prototype.readPluginFromPath = function(dir, pluginName, cb) {
    return cb();
  };

  return PluginDirectory;

})());

module.exports = PluginDirectory;
