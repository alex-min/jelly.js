// Generated by CoffeeScript 1.6.2
var ReadableEntity, fs, path;

fs = require('fs');

path = require('path');

/**
 * RedeableEntity is an (almost) abstract class to deal with general content
 * The main goal of this class is to provide a way to retreive multiple versions of the same content (which was processed)
 * 
 * @class ReadableEntity
*/


ReadableEntity = (function() {
  ReadableEntity.prototype.ReadableEntityCs = function() {
    if (!this._cs) {
      this._cs = true;
      return this._entityContentList = [];
    }
  };

  function ReadableEntity() {
    this.ReadableEntityCs();
  }

  ReadableEntity.prototype.ReadableEntity = true;

  /**
   * Get the current state of the content
   *
   * @for ReadableEntity
   * @method getCurrentContent
   * @return {String} Current state of the content
  */


  ReadableEntity.prototype.getCurrentContent = function() {
    this.ReadableEntityCs();
    return this._entityContentList.slice(-1)[0] || {};
  };

  /**
   * Get the current state of the content as string
   * This is the same thing as calling this.getCurrentContent().content
   *
   * @for ReadableEntity
   * @method getCurrentStringContent
   * @return {String} Current state of the content (only the string part)
  */


  ReadableEntity.prototype.getCurrentStringContent = function() {
    this.ReadableEntityCs();
    return this.getCurrentContent().content;
  };

  /**
   * Erase all the contents
   *
   * @for ReadableEntity
   * @method eraseContent
  */


  ReadableEntity.prototype.eraseContent = function() {
    var _ref;

    this.ReadableEntityCs();
    if ((_ref = this._entityContentList) == null) {
      this._entityContentList = [];
    }
    return this._entityContentList.length = 0;
  };

  /**
   * Get the first content registred
   *
   * @for ReadableEntity
   * @method getFirstContent
   * @return first content registred
  */


  ReadableEntity.prototype.getFirstContent = function() {
    this.ReadableEntityCs();
    return this._entityContentList[0] || {};
  };

  /**
   * Get the list of content registred
   *
   * @for ReadableEntity
   * @method getContentList
   * @return list of content registred
  */


  ReadableEntity.prototype.getContentList = function() {
    this.ReadableEntityCs();
    return this._entityContentList;
  };

  /**
   * Update the content stored
   *
   * @for ReadableEntity
   * @method updateContent
  */


  ReadableEntity.prototype.updateContent = function(content) {
    this.ReadableEntityCs();
    return this._entityContentList.push(content);
  };

  /**
   * Update the content from a given file
   *
   * @for ReadableEntity
   * @method updateContent
  */


  ReadableEntity.prototype.updateContentFromFile = function(filename, encoding, cb) {
    var self;

    if (encoding == null) {
      encoding = "utf8";
    }
    this.ReadableEntityCs();
    self = this;
    cb = cb || encoding;
    if (typeof cb !== 'function') {
      cb = function() {};
    }
    if (typeof encoding !== 'string') {
      encoding = 'utf8';
    }
    return fs.readFile(filename, function(err, content) {
      var extension;

      try {
        if (err) {
          cb(err, null);
          cb = function() {};
          return;
        }
        extension = path.extname(filename).replace('.', '');
        content = {
          filename: filename,
          content: content + '',
          extension: extension
        };
        self.updateContent(content);
        cb(err, content);
        return cb = function() {};
      } catch (_error) {
        err = _error;
        return cb(err, null);
      }
    });
  };

  return ReadableEntity;

})();

module.exports = ReadableEntity;
