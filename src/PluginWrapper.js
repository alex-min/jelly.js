// Generated by CoffeeScript 1.6.2
var File, Logger, PluginHandler, PluginWrapper, ReadableEntity, Tools, TreeElement, async, fs;

async = require('async');

fs = require('fs');

Tools = require('./Tools');

Logger = require('./Logger');

ReadableEntity = require('./ReadableEntity');

TreeElement = require('./TreeElement');

File = require('./File');

PluginHandler = require('./PluginHandler');

/**
 * PluginWrapper is a class providing plugin capabilities to another class.
 * Jelly, GeneralConfiguration, Module and File are inheriting from it. 
 * 
 * @class PluginWrapper
*/


PluginWrapper = (function() {
  PluginWrapper.prototype.PluginWrapper = true;

  PluginWrapper.prototype._constructor_ = function() {};

  function PluginWrapper() {
    this._constructor_();
  }

  PluginWrapper.prototype.applyPlugin = function(pluginInterface, cb) {
    var self;

    cb = cb || function() {};
    self = this;
    if (typeof pluginInterface === 'undefined' || pluginInterface === null || pluginInterface.PluginInterface !== true) {
      cb(new Error("Unable to apply plugin : Invalid pluginInterface passed as a parameter"));
      cb = function() {};
      return;
    }
    return cb();
  };

  return PluginWrapper;

})();

module.exports = PluginWrapper;
