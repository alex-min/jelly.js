// Generated by CoffeeScript 1.6.2
var Logger, Module, ReadableEntity, Tools, TreeElement, _Module;

Tools = require('./Tools');

Logger = require('./Logger');

ReadableEntity = require('./ReadableEntity');

TreeElement = require('./TreeElement');

/**
 * Module is a class dealing with framework Modules.
 * Each module is suppose to be under a different folder on the projet.
 * The main goal is to provide modules with reusable functions (login form, calendar, administration, stastistics...)
 * 
 * @class Module
 * @extends Logger
 * @extends ReadableEntity
 * @extends TreeElement
*/


Module = Tools.implementing(Logger, ReadableEntity, TreeElement, _Module = (function() {
  function _Module() {}

  return _Module;

})(), Module = (function() {
  Module.prototype.Module = true;

  function Module() {
    this._constructor_();
  }

  Module.prototype._constructor_ = function() {
    return this._parentConstructor_();
  };

  /**
   * Load a module from its configuration file
   * This method must be called once when loading the module for the first time.
   * After this, only calls to the 'reload' method are allowed.
   *
   * @for Module
   * @method loadFromFilename
   * @param {String} filename The location of the file
   * @param {Function} callback : parameters (err : error occured)
  */


  Module.prototype.loadFromFilename = function(filename, cb) {
    var self;

    self = this;
    cb = cb || function() {};
    return this.readUpdateAndExecute(filename, 'utf8', function(err) {
      if (err) {
        return cb(err);
      } else {
        return self.reload(cb);
      }
    });
  };

  /**
   * Do the necessary calls to reload the module (it must be loaded before calling this)
   * Currently equivalent to the readAllFiles method 
   *
   * @for Module
   * @method reload
   * @param {Function} callback : parameters (err : error occured)
  */


  Module.prototype.reload = function(cb) {
    return this.readAllFiles(cb);
  };

  /**
   * Read all the files specified under the 'fileList' array section of each module configuration file
   *
   * @for Module
   * @method readAllFiles
   * @param {Function} callback : parameters (err : error occured)
  */


  Module.prototype.readAllFiles = function(cb) {
    var content, self;

    self = this;
    cb = cb || function() {};
    content = this.getLastExecutableContent();
    if (content === null) {
      cb(new Error('There is no executable content pushed on the Module Class'));
      cb = function() {};
      return;
    }
    return cb();
  };

  return Module;

})());

module.exports = Module;
