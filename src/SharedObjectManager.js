// Generated by CoffeeScript 1.6.2
var File, Logger, ReadableEntity, SharedObject, SharedObjectManager, Tools, TreeElement, async, fs, _SharedObjectManager;

async = require('async');

fs = require('fs');

Tools = require('./Tools');

Logger = require('./Logger');

ReadableEntity = require('./ReadableEntity');

TreeElement = require('./TreeElement');

File = require('./File');

SharedObject = require('./SharedObject');

/**
 * SharedObjectManager is a class to manager {SharedObject}s
 *
 * 
 * @class SharedObjectManager
 * @extends Logger
 * @extends ReadableEntity
 * @extends TreeElement
*/


SharedObjectManager = Tools.implementing(Logger, ReadableEntity, TreeElement, _SharedObjectManager = (function() {
  function _SharedObjectManager() {}

  return _SharedObjectManager;

})(), SharedObjectManager = (function() {
  SharedObjectManager.prototype._constructor_ = function() {
    return this._parentConstructor_();
  };

  function SharedObjectManager() {
    this._constructor_();
  }

  /**
   * Register an object to the {SharedObjectManager}.
   * Objects are stored internally as a {SharedObject} class.
   *
   * @for SharedObjectManager
   * @method registerObject
   * @param {String} PluginId The plugin id
   * @param {String} ObjectId The {SharedObject} id
   * @content {Object} Content The content to registed
   * @return {SharedObject} The sharedObject associated with the ids (or null)
  */


  SharedObjectManager.prototype.registerObject = function(pluginId, objectId, content) {
    var pluginTree, sharedObject;

    if (typeof pluginId !== 'string' || typeof objectId !== 'string' || typeof content === 'undefined' || content === null) {
      return;
    }
    pluginTree = this.getChildById(pluginId);
    if (pluginTree === null) {
      pluginTree = new TreeElement();
      pluginTree.setId(pluginId);
      this.addChild(pluginTree);
      pluginTree.setParent(this);
    }
    sharedObject = pluginTree.getChildById(objectId);
    if (sharedObject === null) {
      sharedObject = new SharedObject();
      sharedObject.setId(objectId);
      sharedObject.setParent(pluginTree);
      pluginTree.addChild(sharedObject);
    }
    return sharedObject.updateContent(content);
  };

  /**
   * Get an object registred with the 'registerObject' method.
   * This method will return a {SharedObject} or null if nothing is found.
   *
   * @for SharedObjectManager
   * @method getObject
   * @param {String} PluginId The plugin id
   * @param {String} ObjectId The {SharedObject} id
   * @return {SharedObject} The sharedObject associated with the ids (or null)
  */


  SharedObjectManager.prototype.getObject = function(pluginId, objectId) {
    var moduleSharedList, obj;

    moduleSharedList = this.getChildById(pluginId);
    if (moduleSharedList === null) {
      return null;
    }
    obj = moduleSharedList.getChildById(objectId);
    return obj;
  };

  return SharedObjectManager;

})());

module.exports = SharedObjectManager;
