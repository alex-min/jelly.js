// Generated by CoffeeScript 1.6.2
var Logger, WinstonLoggerWrapper, winston;

winston = require('winston');

WinstonLoggerWrapper = (function() {
  WinstonLoggerWrapper.prototype._constructor_ = function() {
    this._logger = new winston.Logger();
    this._logger.add(winston.transports.Console);
    return this._name = '';
  };

  function WinstonLoggerWrapper() {
    this._constructor_();
  }

  WinstonLoggerWrapper.prototype.LoggerWrapper = true;

  WinstonLoggerWrapper.prototype.setClassName = function(name) {
    return this._name = name;
  };

  WinstonLoggerWrapper.prototype.info = function(s) {
    return this._logger.info((this._name || '') + ': ' + s);
  };

  WinstonLoggerWrapper.prototype.log = function(type, s) {
    return this._logger.log(type, (this._name || '') + ': ' + s);
  };

  WinstonLoggerWrapper.prototype.error = function(s) {
    return this._logger.error((this._name || '') + ': ' + s);
  };

  WinstonLoggerWrapper.prototype.warn = function(s) {
    return this._logger.warn((this._name || '') + ': ' + s);
  };

  WinstonLoggerWrapper.prototype.off = function() {
    return this._logger.remove();
  };

  WinstonLoggerWrapper.prototype.addFile = function(filepath) {
    return this._logger.add(winston.transports.File, {
      filename: filepath,
      handleExceptions: true
    });
  };

  return WinstonLoggerWrapper;

})();

/**
 * The logger class is providing a small interface to add logging capabilites to a given class
 * 
 * @class Logger
*/


Logger = (function() {
  Logger.prototype._constructor_ = function() {
    this._log = new WinstonLoggerWrapper();
    return this._log.setClassName(this._selfClassName);
  };

  function Logger() {
    this._constructor_();
  }

  /**
   * Get the logger class for external usage
   *
   * @for Logger
   * @method getLogger
   * @return {Logger} Logger class object
  */


  Logger.prototype.getLogger = function() {
    return this._log;
  };

  Logger.prototype.Logger = true;

  return Logger;

})();

module.exports = Logger;
