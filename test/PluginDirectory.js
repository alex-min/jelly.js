// Generated by CoffeeScript 1.6.2
var GeneralConfiguration, Jelly, assert, async, path, toType;

assert = require('chai').assert;

async = require('async');

path = require('path');

toType = function(obj) {
  return {}.toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
};

Jelly = require('../src/Jelly');

GeneralConfiguration = require('../src/GeneralConfiguration');

describe('PluginDirectory', function() {
  var PluginDirectory;

  PluginDirectory = require('../src/PluginDirectory');
  it('Should be a PluginDirectory', function() {
    return assert.equal(PluginDirectory.prototype.PluginDirectory, true);
  });
  describe('_constructor_', function() {
    return it('Should have a _constructor_', function() {
      return assert.typeOf(PluginDirectory.prototype._constructor_, 'function');
    });
  });
  describe('#constructor', function() {
    it('creating an instance should not throw errors', function() {
      var m;

      return m = new PluginDirectory();
    });
    it('Should extends from a Logger', function() {
      return assert.equal(PluginDirectory.prototype.Logger, true);
    });
    it('Should extends from a ReadableEntity', function() {
      return assert.equal(PluginDirectory.prototype.ReadableEntity, true);
    });
    return it('Should extends from a TreeElement', function() {
      return assert.equal(PluginDirectory.prototype.TreeElement, true);
    });
  });
  describe('#readAllPlugins', function() {
    it('Should be a callable function', function() {
      return assert.typeOf(PluginDirectory.prototype.readAllPlugins, 'function');
    });
    it('Should return an error when there is no Jelly class bound', function(cb) {
      var p;

      p = new PluginDirectory();
      return p.readAllPlugins(function(err) {
        var e;

        try {
          assert.equal(toType(err), 'error');
          return cb();
        } catch (_error) {
          e = _error;
          return cb(e);
        }
      });
    });
    return it('Should read all plugins in the local and general plugin directory', function(cb) {
      var jelly, p;

      p = new PluginDirectory();
      jelly = new Jelly();
      p.setParent(jelly);
      jelly.setRootDirectory("" + __dirname + "/testFiles/pluginLoading");
      return p.readAllPlugins(function(err) {
        if (err != null) {
          cb(err);
          cb = function() {};
          return;
        }
        return cb();
      });
    });
  });
  describe('#readPluginDirectory', function() {
    it('Should be a callable function', function() {
      return assert.typeOf(PluginDirectory.prototype.readPluginDirectory, 'function');
    });
    it('Should raise an error when a null value is passed as a directory', function(cb) {
      return new PluginDirectory().readPluginDirectory(null, function(err) {
        var e;

        try {
          assert.equal(toType(err), 'error');
          return cb();
        } catch (_error) {
          e = _error;
          return cb(e);
        }
      });
    });
    it('Should read a valid plugin directory', function(cb) {
      return new PluginDirectory().readPluginDirectory("" + __dirname + "/testFiles/pluginLoading/plugins", function(err) {
        var e;

        try {
          assert.equal(err, null);
          return cb();
        } catch (_error) {
          e = _error;
          return cb(e);
        }
      });
    });
    it('Should raise an error if the directory specified do not exist', function(cb) {
      return new PluginDirectory().readPluginDirectory("/do/not/exist", function(err) {
        var e;

        try {
          assert.equal(toType(err), 'error');
          return cb();
        } catch (_error) {
          e = _error;
          return cb(e);
        }
      });
    });
    return it('Should raise an error if the directory specified is a file', function(cb) {
      return new PluginDirectory().readPluginDirectory("" + __dirname + "/testFiles/dummyFile.json", function(err) {
        var e;

        try {
          assert.equal(toType(err), 'error');
          return cb();
        } catch (_error) {
          e = _error;
          return cb(e);
        }
      });
    });
  });
  return describe('#readPluginFromPath', function() {
    it('Should be a callable function', function() {
      return assert.typeOf(PluginDirectory.prototype.readPluginFromPath, 'function');
    });
    it('Should raise an error when there null is given as a directory', function(cb) {
      return new PluginDirectory().readPluginFromPath(null, "pluginName", function(err) {
        var e;

        try {
          assert.equal(toType(err), 'error');
          return cb();
        } catch (_error) {
          e = _error;
          return cb(e);
        }
      });
    });
    it('Should raise an error when there null is given as a name', function(cb) {
      return new PluginDirectory().readPluginFromPath("" + __dirname + "/testFiles/pluginLoading/plugins/testPlugin", null, function(err) {
        var e;

        try {
          assert.equal(toType(err), 'error');
          return cb();
        } catch (_error) {
          e = _error;
          return cb(e);
        }
      });
    });
    return it('Should load a plugin', function(cb) {
      return new PluginDirectory().readPluginFromPath("" + __dirname + "/testFiles/pluginLoading/plugins/testPlugin", "testPlugin", function(err) {
        return cb(err);
      });
    });
  });
});
