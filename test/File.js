// Generated by CoffeeScript 1.6.2
var Jelly, assert, async, path, toType;

assert = require('chai').assert;

async = require('async');

path = require('path');

toType = function(obj) {
  return {}.toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
};

Jelly = require('../src/Jelly');

describe('File', function() {
  var File;

  File = require('../src/File');
  it('Should be a File', function() {
    return assert.equal(File.prototype.File, true);
  });
  describe('#constructor', function() {
    it('creating an instance should not throw errors', function() {
      var file;

      return file = new File();
    });
    it('Should extends from a Logger', function() {
      return assert.equal(File.prototype.Logger, true);
    });
    it('Should extends from a ReadableEntity', function() {
      return assert.equal(File.prototype.ReadableEntity, true);
    });
    return it('Should extends from a TreeElement', function() {
      return assert.equal(File.prototype.TreeElement, true);
    });
  });
  return describe('#loadFromFilename', function() {
    it('Should be a callable function', function() {
      return assert.typeOf(File.prototype.loadFromFilename, 'function');
    });
    it('Should return an error if the file does no exist', function(cb) {
      var file;

      file = new File();
      return file.loadFromFilename('/do/not/exist', function(err) {
        var e;

        try {
          assert.equal(toType(err), 'error');
          return cb();
        } catch (_error) {
          e = _error;
          return cb(e);
        }
      });
    });
    return it('Should load a file from its filename', function(cb) {
      var file;

      file = new File();
      return file.loadFromFilename("" + __dirname + "/testFiles/dummyFIle.json", function(err) {
        return cb(err);
      });
    });
  });
});
