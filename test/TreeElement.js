// Generated by CoffeeScript 1.6.2
var assert, async, toType;

assert = require('chai').assert;

async = require('async');

toType = function(obj) {
  return {}.toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
};

describe('TreeElement', function() {
  var TreeElement;

  TreeElement = require('../src/TreeElement');
  it('Should be a TreeElement', function() {
    return assert.equal(TreeElement.prototype.TreeElement, true);
  });
  describe('_constructor_', function() {
    return it('Should have a _constructor_', function() {
      return assert.typeOf(TreeElement.prototype._constructor_, 'function');
    });
  });
  describe('#getChildList', function() {
    it('Should be callable function', function() {
      return assert.typeOf(TreeElement.prototype.getChildList, 'function');
    });
    it('Should return an empty array when nothing is set', function() {
      var treeElement;

      treeElement = new TreeElement();
      assert.equal(toType(treeElement.getChildList()), 'array');
      return assert.equal(treeElement.getChildList().length, 0);
    });
    it('Should return an error if the child is not a TreeElement', function(cb) {
      var treeElement;

      treeElement = new TreeElement();
      return treeElement.addChild('pelos', function(err, child) {
        var e;

        try {
          assert.equal(child, null);
          assert.equal(toType(err), 'error');
          cb();
          return cb = function() {};
        } catch (_error) {
          e = _error;
          cb(e);
          return cb = function() {};
        }
      });
    });
    return it('Should push a child element', function(cb) {
      var child, treeElement;

      treeElement = new TreeElement();
      child = new TreeElement();
      child.__TEST__ = 1;
      return treeElement.addChild(child, function(err, child) {
        var check, e;

        try {
          check = (function(child) {
            assert.equal(err, null);
            assert.equal(Object.getPrototypeOf(child).TreeElement, true);
            return assert.equal(child.__TEST__, 1);
          });
          check(child);
          check(treeElement.getChildList()[0]);
          cb();
          return cb = function() {};
        } catch (_error) {
          e = _error;
          cb(e);
          return cb = function() {};
        }
      });
    });
  });
  return describe('#getParent', function() {
    it('Should be callable function', function() {
      return assert.typeOf(TreeElement.prototype.getParent, 'function');
    });
    it('Should return null when nothing is set', function() {
      return assert.equal(new TreeElement().getParent(), null);
    });
    return it('Should return the parent when a parent is set', function() {
      var t1, t2;

      t1 = new TreeElement();
      t1.__PARENT__ = 1;
      t2 = new TreeElement();
      return t2.setParent(t1, function(err) {
        assert.equal(err, null);
        return assert.equal(t2.getParent().__PARENT__, 1);
      });
    });
  });
});
