// Generated by CoffeeScript 1.6.2
var assert, async, path, toType;

assert = require('chai').assert;

async = require('async');

path = require('path');

toType = function(obj) {
  return {}.toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
};

describe('Jelly', function() {
  var Jelly;

  Jelly = require('../src/Jelly');
  describe('#constructor', function() {
    it('creating a Jelly instance should not throw errors', function() {
      var jelly;

      return jelly = new Jelly();
    });
    it('Jelly should inherits from a Logger', function() {
      return assert.equal(Jelly.prototype.Logger, true);
    });
    it('Jelly should inherits from a ReadableEntity', function() {
      return assert.equal(Jelly.prototype.ReadableEntity, true);
    });
    it('should extends from a ReadableEntity', function() {
      return assert.equal(Jelly.prototype.TreeElement, true);
    });
    return it('Should extends from a PluginWrapper', function() {
      return assert.equal(Jelly.prototype.PluginWrapper, true);
    });
  });
  describe('#getLocalPath', function() {
    it('Should be a callable function', function() {
      return assert.typeOf(Jelly.prototype.getLocalPath, "function");
    });
    return it('Should be equivlent of getRootDirectory() + / + path', function() {
      var Path, jelly;

      jelly = new Jelly();
      Path = 'a/b/c/d';
      assert.equal("" + (jelly.getRootDirectory()) + "/" + Path, jelly.getLocalPath(Path));
      jelly.setRootDirectory('e/f/g/h');
      return assert.equal("" + (jelly.getRootDirectory()) + "/" + Path, jelly.getLocalPath(Path));
    });
  });
  describe('#getRootDirectory', function() {
    it('Should be a callable function', function() {
      return assert.typeOf(Jelly.prototype.getRootDirectory, "function");
    });
    it('Should return __dirname by default', function() {
      var dirname, jelly;

      jelly = new Jelly();
      dirname = path.normalize("" + __dirname + "/../src");
      return assert.equal(jelly.getRootDirectory(), dirname, "the directory should be __dirname");
    });
    return it('Should get the current root directory', function() {
      var jelly;

      jelly = new Jelly();
      jelly.setRootDirectory('a');
      assert.equal(jelly.getRootDirectory(), 'a', 'the current root directory is not what specified');
      jelly.setRootDirectory('b');
      return assert.equal(jelly.getRootDirectory(), 'b', 'the current root directory is not what specified');
    });
  });
  describe('#setRootDirectory', function() {
    return it('Should be a callable function', function() {
      return assert.typeOf(Jelly.prototype.getRootDirectory, "function");
    });
  });
  describe('#checkRootDirectory', function() {
    it('Should be a callable function', function() {
      return assert.typeOf(Jelly.prototype.checkRootDirectory, 'function');
    });
    it('Should return an error if the root directory do not exist', function(cb) {
      var jelly;

      jelly = new Jelly();
      jelly.setRootDirectory("/a/b/c/d");
      return jelly.checkRootDirectory(function(err) {
        var e;

        try {
          assert.equal(toType(err), 'error');
          return cb();
        } catch (_error) {
          e = _error;
          return cb(e);
        }
      });
    });
    it('Should return an error if  the root directory is not a directory', function(cb) {
      var jelly;

      jelly = new Jelly();
      jelly.setRootDirectory("" + __dirname + "/testFiles/dummyFile.txt");
      return jelly.checkRootDirectory(function(err) {
        var e;

        try {
          assert.equal(toType(err), 'error');
          cb();
          return cb = function() {};
        } catch (_error) {
          e = _error;
          cb(e);
          return cb = function() {};
        }
      });
    });
    return it('Should not throw errors on a valid root directory', function(cb) {
      var jelly;

      jelly = new Jelly();
      jelly.setRootDirectory("" + __dirname + "/testFiles/validJellyConfFile");
      return jelly.checkRootDirectory(function(err) {
        var e;

        try {
          assert.equal(err, null);
          cb();
          return cb = function() {};
        } catch (_error) {
          e = _error;
          cb(e);
          return cb = function() {};
        }
      });
    });
  });
  describe('#readJellyConfigurationFile', function() {
    it('Should be a callable function', function() {
      return assert.typeOf(Jelly.prototype.readJellyConfigurationFile, 'function');
    });
    it('Should return an error if the /conf directory do not exist', function(cb) {
      var jelly;

      jelly = new Jelly();
      jelly.setRootDirectory("/a/b/c/d");
      return jelly.readJellyConfigurationFile(function(err, content) {
        var e;

        try {
          assert.equal(toType(err), 'error');
          assert.equal(content, null);
          cb();
          return cb = function() {};
        } catch (_error) {
          e = _error;
          cb(e);
          return cb = function() {};
        }
      });
    });
    it('Should return an error if  /conf is not a directory', function(cb) {
      var jelly;

      jelly = new Jelly();
      jelly.setRootDirectory("" + __dirname + "/testFiles/emptyConfFile");
      return jelly.readJellyConfigurationFile(function(err, content) {
        var e;

        try {
          assert.equal(toType(err), 'error');
          assert.equal(content, null);
          cb();
          return cb = function() {};
        } catch (_error) {
          e = _error;
          cb(e);
          return cb = function() {};
        }
      });
    });
    it('Should return an error if /conf/JellyConf.json do not exist', function(cb) {
      var jelly;

      jelly = new Jelly();
      jelly.setRootDirectory("" + __dirname + "/testFiles/emptyConfFolder");
      return jelly.readJellyConfigurationFile(function(err, content) {
        var e;

        try {
          assert.equal(toType(err), 'error');
          assert.equal(content, null);
          cb();
          return cb = function() {};
        } catch (_error) {
          e = _error;
          cb(e);
          return cb = function() {};
        }
      });
    });
    it('Should return the content read', function(cb) {
      var jelly;

      jelly = new Jelly();
      jelly.setRootDirectory("" + __dirname + "/testFiles/validJellyConfFile");
      return jelly.readJellyConfigurationFile(function(e, content) {
        try {
          assert.equal(e, null);
          assert.typeOf(content, 'object');
          assert.equal(content.content, '{"test":true}');
          assert.equal(content.extension, 'json');
          cb();
          return cb = function() {};
        } catch (_error) {
          e = _error;
          cb(e);
          return cb = function() {};
        }
      });
    });
    return it('Should push a __exec content on the ReadableEntity object', function(cb) {
      var jelly;

      jelly = new Jelly();
      jelly.setRootDirectory("" + __dirname + "/testFiles/validJellyConfFile");
      return jelly.readJellyConfigurationFile(function(e, content) {
        var ct;

        try {
          ct = jelly.getCurrentContent();
          assert.equal(ct.extension, '__exec');
          assert.typeOf(ct.content, 'object');
          assert.equal(ct.content.test, true);
          cb();
          return cb = function() {};
        } catch (_error) {
          e = _error;
          cb(e);
          return cb = function() {};
        }
      });
    });
  });
  describe('#readAllGeneralConfigurationFiles', function() {
    it('Should be a callable function', function() {
      return assert.typeOf(Jelly.prototype.readAllGeneralConfigurationFiles, 'function');
    });
    it('Should return an error when there is no executable content available', function(cb) {
      var jelly;

      jelly = new Jelly();
      return jelly.readAllGeneralConfigurationFiles(function(err) {
        var e;

        try {
          assert.equal(toType(err), 'error');
          cb();
          return cb = function() {};
        } catch (_error) {
          e = _error;
          cb(e);
          return cb = function() {};
        }
      });
    });
    return it('Should read all general configuration file', function(cb) {
      var jelly;

      jelly = new Jelly();
      jelly.setRootDirectory("" + __dirname + "/testFiles/validGeneralConfig");
      return async.series([
        function(cb) {
          return jelly.readJellyConfigurationFile(function(err) {
            return cb(err, null);
          });
        }, function(cb) {
          return jelly.readAllGeneralConfigurationFiles(function(err) {
            return cb(err, null);
          });
        }
      ], function(err, res) {
        var e;

        try {
          assert.equal(err, null, 'files should be valid');
          return cb();
        } catch (_error) {
          e = _error;
          return cb(e);
        }
      });
    });
  });
  describe('#getPluginDirectory', function() {
    it('Should be a callable function', function() {
      return assert.typeOf(Jelly.prototype.getPluginDirectory, 'function');
    });
    return it('Should return getRootDirectory() + /plugins', function() {
      var j;

      j = new Jelly();
      j.setRootDirectory('a/b/c');
      assert.equal(j.getPluginDirectory(), "" + (j.getRootDirectory()) + "/plugins");
      j.setRootDirectory('/d/e/f/g/test');
      return assert.equal(j.getPluginDirectory(), "" + (j.getRootDirectory()) + "/plugins");
    });
  });
  return describe('#getPluginList', function() {
    it('Should be a callable function', function() {
      return assert.typeOf(Jelly.prototype.getPluginList, 'function');
    });
    return it('The constructor should create a PluginList instance', function() {
      var p;

      p = new Jelly().getPluginList();
      assert.typeOf(p, 'object');
      return assert.equal(p.PluginList, true);
    });
  });
});
