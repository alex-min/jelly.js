// Generated by CoffeeScript 1.6.2
var assert, async, path, toType;

assert = require('chai').assert;

async = require('async');

path = require('path');

toType = function(obj) {
  return {}.toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
};

describe('Jelly', function() {
  var Jelly;

  Jelly = require('../src/Jelly');
  describe('#constructor', function() {
    it('creating a Jelly instance should not throw errors', function() {
      var jelly;

      return jelly = new Jelly();
    });
    it('Jelly should inherits from a Logger', function() {
      return assert.equal(Jelly.prototype.Logger, true);
    });
    return it('Jelly should inherits from a ReadableEntity', function() {
      return assert.equal(Jelly.prototype.ReadableEntity, true);
    });
  });
  describe('#getRootDirectory', function() {
    it('Should be a callable function', function() {
      return assert.typeOf(Jelly.prototype.getRootDirectory, "function");
    });
    it('Should return __dirname by default', function() {
      var dirname, jelly;

      jelly = new Jelly();
      dirname = path.normalize("" + __dirname + "/../src");
      return assert.equal(jelly.getRootDirectory(), dirname, "the directory should be __dirname");
    });
    return it('Should get the current root directory', function() {
      var jelly;

      jelly = new Jelly();
      jelly.setRootDirectory('a');
      assert.equal(jelly.getRootDirectory(), 'a', 'the current root directory is not what specified');
      jelly.setRootDirectory('b');
      return assert.equal(jelly.getRootDirectory(), 'b', 'the current root directory is not what specified');
    });
  });
  describe('#setRootDirectory', function() {
    return it('Should be a callable function', function() {
      return assert.typeOf(Jelly.prototype.getRootDirectory, "function");
    });
  });
  return describe('#readJellyConfigurationFile', function() {
    it('Should be a callable function', function() {
      return assert.typeOf(Jelly.prototype.readJellyConfigurationFile, 'function');
    });
    it('Should return an error if the /conf directory do not exist', function(cb) {
      var jelly;

      jelly = new Jelly();
      return jelly.readJellyConfigurationFile(function(err, content) {
        assert.equal(toType(err), 'error');
        assert.equal(content, null);
        return cb();
      });
    });
    it('Should return an error if  /conf is not a directory', function(cb) {
      var jelly;

      jelly = new Jelly();
      jelly.setRootDirectory("" + __dirname + "/testFiles/emptyConfFile");
      return jelly.readJellyConfigurationFile(function(err, content) {
        assert.equal(toType(err), 'error');
        assert.equal(content, null);
        return cb();
      });
    });
    it('Should return an error if /conf/JellyConf.json do not exist', function(cb) {
      var jelly;

      jelly = new Jelly();
      jelly.setRootDirectory("" + __dirname + "/testFiles/emptyConfFolder");
      return jelly.readJellyConfigurationFile(function(err, content) {
        assert.equal(toType(err), 'error');
        assert.equal(content, null);
        return cb();
      });
    });
    return it('Should push JellyConf content into the ReadableEntity methods', function(cb) {
      var jelly;

      jelly = new Jelly();
      jelly.setRootDirectory("" + __dirname + "/testFiles/validJellyConfFile");
      return jelly.readJellyConfigurationFile(function(e, content) {
        assert.equal(e, null);
        assert.typeOf(content, 'object');
        assert.equal(content.content, '{}');
        assert.equal(content.extension, 'json');
        return cb();
      });
    });
  });
});
